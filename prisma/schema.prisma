// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  isTrusted         Boolean             @default(false)
  realEstateListings RealEstateListing[]
  createdAt         DateTime            @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RealEstateListing {
  id          String               @id @default(cuid())
  title       String
  description String
  price       Int
  bedrooms    Int
  bathrooms   Int
  sqmeters    Int
  lotSize     Int
  yearBuilt   Int
  type        String
  status      String
  images      String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  location    RealEstateLocation[]
}

model RealEstateLocation {
  id        String            @id @default(cuid())
  address   String
  city      String
  state     String
  zip       String
  country   String
  latitude  Float
  longitude Float
  listing   RealEstateListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}
